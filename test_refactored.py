"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from spine_processor import initialize_models, process_study
        logger.info("‚úì spine_processor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ spine_processor: {e}")
        return False
    
    try:
        from orthanc_client import (
            create_orthanc_client, 
            download_study_from_orthanc, 
            read_dicoms_in_folder
        )
        logger.info("‚úì orthanc_client –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ orthanc_client: {e}")
        return False
    
    try:
        from triton_client import initialize_triton_models, TritonModelClient
        logger.info("‚úì triton_client –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.warning(f"‚ö† triton_client –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ Triton –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω): {e}")
    
    return True


def test_folder_reading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–µ–Ω–∏–µ DICOM —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏...")
    
    try:
        from orthanc_client import read_dicoms_in_folder
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏
        test_folder = "ST000000"
        if not Path(test_folder).exists():
            logger.warning(f"‚ö† –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ {test_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
        
        studies = read_dicoms_in_folder(test_folder)
        logger.info(f"‚úì –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(studies)} DICOM —Ñ–∞–π–ª–æ–≤ –∏–∑ {test_folder}")
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏: {e}")
        return False


def test_model_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...")
    
    try:
        from spine_processor import initialize_models
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
        model_paths = [
            'model/weights/ax.pth',
            'model/weights/sag_step_1.pth', 
            'model/weights/sag_step_2.pth',
            'model/weights/grading.pth'
        ]
        
        missing_models = []
        for path in model_paths:
            if not Path(path).exists():
                missing_models.append(path)
        
        if missing_models:
            logger.warning(f"‚ö† –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π: {missing_models}")
            logger.warning("‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π")
            return True
        
        models = initialize_models()
        logger.info("‚úì –ú–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        ax_model, sag_step_1_model, sag_step_2_model, grading_model = models
        assert ax_model is not None
        assert sag_step_1_model is not None
        assert sag_step_2_model is not None
        assert grading_model is not None
        
        logger.info("‚úì –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def test_triton_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Triton (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Triton...")
    
    try:
        from triton_client import initialize_triton_models
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Triton
        triton_client, model_names = initialize_triton_models("localhost:8000")
        
        if triton_client.is_server_ready():
            logger.info("‚úì Triton —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            logger.info(f"‚úì –ú–æ–¥–µ–ª–∏: {list(model_names.keys())}")
            return True
        else:
            logger.warning("‚ö† Triton —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µÔøΩÔøΩ)")
            return True
            
    except Exception as e:
        logger.warning(f"‚ö† Triton –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω): {e}")
        return True


def test_main_script():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
    
    try:
        import main_refactored
        logger.info("‚úì main_refactored –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = main_refactored.parse_args()
        logger.info("‚úì –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    logger.info("=" * 50)
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    logger.info("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ß—Ç–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏", test_folder_reading),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π", test_model_initialization),
        ("–ü–æ–¥–∫–ª—éÔøΩÔøΩ–µ–Ω–∏–µ –∫ Triton", test_triton_connection),
        ("–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç", test_main_script),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 50)
    logger.info("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info("=" * 50)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù" if result else "‚úó –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info(f"\n–ò—Ç–æ–≥–æ: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    if failed == 0:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.warning(f"‚ö† {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)